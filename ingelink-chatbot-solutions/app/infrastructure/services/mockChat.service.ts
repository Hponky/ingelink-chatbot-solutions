import { IChatRepository } from '@/app/domain/repositories/chat.repository';
import { Message } from '@/app/domain/entities/message.entity';

export class MockChatService implements IChatRepository {
  private responses = [
    {
      keywords: ['hola', 'hello', 'hi', 'buenos dÃ­as', 'buenas tardes', 'buenas noches'],
      responses: [
        'Â¡Hola! ğŸ‘‹ Es un placer saludarte. Â¿En quÃ© puedo ayudarte hoy?',
        'Â¡QuÃ© tal! ğŸ˜Š Estoy aquÃ­ para asistirte con lo que necesites.',
        'Â¡Hola! Espero que tengas un excelente dÃ­a. Â¿CÃ³mo puedo ser de ayuda?',
      ]
    },
    {
      keywords: ['gracias', 'thank you', 'thanks', 'te agradezco'],
      responses: [
        'Â¡De nada! ğŸ˜Š Siempre es un placer ayudarte.',
        'Â¡No hay de quÃ©! Estoy aquÃ­ para eso. Â¿Algo mÃ¡s en lo que pueda asistirte?',
        'Â¡Con mucho gusto! Me alegra poder ser de ayuda.',
      ]
    },
    {
      keywords: ['adiÃ³s', 'bye', 'hasta luego', 'nos vemos', 'chao'],
      responses: [
        'Â¡Hasta luego! ğŸ‘‹ Que tengas un dÃ­a fantÃ¡stico.',
        'Â¡Nos vemos! Siempre estarÃ© aquÃ­ cuando me necesites.',
        'Â¡AdiÃ³s! Espero verte pronto por aquÃ­. ğŸ˜Š',
      ]
    },
    {
      keywords: ['ayuda', 'help', 'no entiendo', 'confused'],
      responses: [
        'Â¡Por supuesto! Estoy aquÃ­ para ayudarte. Â¿PodrÃ­as ser mÃ¡s especÃ­fico sobre lo que necesitas?',
        'No te preocupes, estoy aquÃ­ para asistirte. Â¿En quÃ© Ã¡rea especÃ­fica necesitas ayuda?',
        'Claro, me encanta ayudar. Â¿PodrÃ­as contarme mÃ¡s detalles sobre tu consulta?',
      ]
    },
    {
      keywords: ['programaciÃ³n', 'cÃ³digo', 'programming', 'code', 'desarrollo'],
      responses: [
        'Â¡Excelente! Me encanta hablar sobre programaciÃ³n. Â¿En quÃ© lenguaje o tecnologÃ­a estÃ¡s trabajando?',
        'La programaciÃ³n es fascinante. Â¿Tienes algÃºn proyecto especÃ­fico en mente o algÃºn problema que resolver?',
        'Â¡Genial! Puedo ayudarte con conceptos de programaciÃ³n, debugging, arquitectura y mÃ¡s. Â¿QuÃ© necesitas?',
      ]
    },
    {
      keywords: ['react', 'javascript', 'typescript', 'nextjs', 'frontend'],
      responses: [
        'Â¡React es increÃ­ble! Es una de mis tecnologÃ­as favoritas. Â¿EstÃ¡s trabajando en algÃºn componente especÃ­fico?',
        'JavaScript/TypeScript son herramientas muy poderosas. Â¿Hay algÃºn concepto o problema especÃ­fico que te gustarÃ­a discutir?',
        'Next.js es una excelente elecciÃ³n para desarrollo frontend. Â¿Necesitas ayuda con routing, SSR, o alguna otra caracterÃ­stica?',
      ]
    }
  ];

  private getRandomResponse(responses: string[]): string {
    return responses[Math.floor(Math.random() * responses.length)];
  }

  private findMatchingResponse(message: string): string {
    const lowerMessage = message.toLowerCase();
    
    for (const category of this.responses) {
      for (const keyword of category.keywords) {
        if (lowerMessage.includes(keyword)) {
          return this.getRandomResponse(category.responses);
        }
      }
    }

    // Respuestas por defecto mÃ¡s inteligentes
    const defaultResponses = [
      `Interesante pregunta sobre "${message}". Aunque soy un asistente de demostraciÃ³n, puedo ayudarte a explorar este tema. Â¿PodrÃ­as darme mÃ¡s contexto?`,
      `Me parece muy relevante lo que mencionas. Aunque mis capacidades son limitadas en esta demo, estarÃ© encantado de discutir "${message}" contigo.`,
      `"${message}" es un tema que definitivamente vale la pena explorar. Â¿Hay algÃºn aspecto especÃ­fico que te interese mÃ¡s?`,
      `Gracias por compartir eso sobre "${message}". Me gustarÃ­a entender mejor tu perspectiva. Â¿PodrÃ­as elaborar un poco mÃ¡s?`,
      `Es fascinante lo que mencionas. Aunque soy una demostraciÃ³n, me encanta cuando las conversaciones toman direcciones interesantes como "${message}".`
    ];

    return this.getRandomResponse(defaultResponses);
  }

  async sendMessage(message: string): Promise<Message> {
    // Simular latencia de red variable (1-3 segundos)
    const delay = Math.random() * 2000 + 1000;
    
    return new Promise((resolve) => {
      setTimeout(() => {
        const responseText = this.findMatchingResponse(message);
        
        const response: Message = {
          id: crypto.randomUUID(),
          text: responseText,
          sender: 'assistant',
          timestamp: new Date(),
        };
        resolve(response);
      }, delay);
    });
  }
}